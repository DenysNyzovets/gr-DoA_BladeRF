# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_DoA_BladeRF_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_DoA_BladeRF_swig')
    _DoA_BladeRF_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DoA_BladeRF_swig', [dirname(__file__)])
        except ImportError:
            import _DoA_BladeRF_swig
            return _DoA_BladeRF_swig
        try:
            _mod = imp.load_module('_DoA_BladeRF_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _DoA_BladeRF_swig = swig_import_helper()
    del swig_import_helper
else:
    import _DoA_BladeRF_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _DoA_BladeRF_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _DoA_BladeRF_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _DoA_BladeRF_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _DoA_BladeRF_swig.high_res_timer_epoch()
class mess_sink_f(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::mess_sink_f.

    To avoid accidental use of raw pointers, DoA_BladeRF::mess_sink_f's constructor is in a private implementation class. DoA_BladeRF::mess_sink_f::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> mess_sink_f_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::mess_sink_f.

        To avoid accidental use of raw pointers, DoA_BladeRF::mess_sink_f's constructor is in a private implementation class. DoA_BladeRF::mess_sink_f::make is the public interface for creating new instances.
        """
        return _DoA_BladeRF_swig.mess_sink_f_make()

    make = staticmethod(make)
    __swig_destroy__ = _DoA_BladeRF_swig.delete_mess_sink_f
    __del__ = lambda self: None
mess_sink_f_swigregister = _DoA_BladeRF_swig.mess_sink_f_swigregister
mess_sink_f_swigregister(mess_sink_f)

def mess_sink_f_make():
    """
    mess_sink_f_make() -> mess_sink_f_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::mess_sink_f.

    To avoid accidental use of raw pointers, DoA_BladeRF::mess_sink_f's constructor is in a private implementation class. DoA_BladeRF::mess_sink_f::make is the public interface for creating new instances.
    """
    return _DoA_BladeRF_swig.mess_sink_f_make()

class mess_sink_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::DoA_BladeRF::mess_sink_f)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::mess_sink_f)> self) -> mess_sink_f_sptr
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::mess_sink_f)> self, mess_sink_f p) -> mess_sink_f_sptr
        """
        this = _DoA_BladeRF_swig.new_mess_sink_f_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(mess_sink_f_sptr self) -> mess_sink_f"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr___deref__(self)

    __swig_destroy__ = _DoA_BladeRF_swig.delete_mess_sink_f_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(mess_sink_f_sptr self) -> mess_sink_f_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::mess_sink_f.

        To avoid accidental use of raw pointers, DoA_BladeRF::mess_sink_f's constructor is in a private implementation class. DoA_BladeRF::mess_sink_f::make is the public interface for creating new instances.
        """
        return _DoA_BladeRF_swig.mess_sink_f_sptr_make(self)


    def history(self):
        """history(mess_sink_f_sptr self) -> unsigned int"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mess_sink_f_sptr self, int which, int delay)
        declare_sample_delay(mess_sink_f_sptr self, unsigned int delay)
        """
        return _DoA_BladeRF_swig.mess_sink_f_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(mess_sink_f_sptr self, int which) -> unsigned int"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(mess_sink_f_sptr self) -> int"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(mess_sink_f_sptr self) -> double"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_relative_rate(self)


    def start(self):
        """start(mess_sink_f_sptr self) -> bool"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_start(self)


    def stop(self):
        """stop(mess_sink_f_sptr self) -> bool"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(mess_sink_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(mess_sink_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(mess_sink_f_sptr self) -> int"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(mess_sink_f_sptr self, int m)"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mess_sink_f_sptr self)"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mess_sink_f_sptr self) -> bool"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(mess_sink_f_sptr self, int m)"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(mess_sink_f_sptr self) -> int"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(mess_sink_f_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mess_sink_f_sptr self, long max_output_buffer)
        set_max_output_buffer(mess_sink_f_sptr self, int port, long max_output_buffer)
        """
        return _DoA_BladeRF_swig.mess_sink_f_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(mess_sink_f_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mess_sink_f_sptr self, long min_output_buffer)
        set_min_output_buffer(mess_sink_f_sptr self, int port, long min_output_buffer)
        """
        return _DoA_BladeRF_swig.mess_sink_f_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(mess_sink_f_sptr self) -> float"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mess_sink_f_sptr self) -> float"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mess_sink_f_sptr self) -> float"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(mess_sink_f_sptr self) -> float"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mess_sink_f_sptr self) -> float"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(mess_sink_f_sptr self) -> float"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mess_sink_f_sptr self, int which) -> float
        pc_input_buffers_full(mess_sink_f_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mess_sink_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(mess_sink_f_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mess_sink_f_sptr self, int which) -> float
        pc_input_buffers_full_var(mess_sink_f_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mess_sink_f_sptr self, int which) -> float
        pc_output_buffers_full(mess_sink_f_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mess_sink_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(mess_sink_f_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mess_sink_f_sptr self, int which) -> float
        pc_output_buffers_full_var(mess_sink_f_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(mess_sink_f_sptr self) -> float"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(mess_sink_f_sptr self) -> float"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(mess_sink_f_sptr self) -> float"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(mess_sink_f_sptr self) -> float"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(mess_sink_f_sptr self) -> float"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(mess_sink_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(mess_sink_f_sptr self)"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(mess_sink_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(mess_sink_f_sptr self) -> int"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(mess_sink_f_sptr self) -> int"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(mess_sink_f_sptr self, int priority) -> int"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(mess_sink_f_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_name(self)


    def symbol_name(self):
        """symbol_name(mess_sink_f_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(mess_sink_f_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(mess_sink_f_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(mess_sink_f_sptr self) -> long"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(mess_sink_f_sptr self) -> basic_block_sptr"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(mess_sink_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(mess_sink_f_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(mess_sink_f_sptr self, std::string name)"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(mess_sink_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(mess_sink_f_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(mess_sink_f_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(mess_sink_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.mess_sink_f_sptr_message_subscribers(self, which_port)

mess_sink_f_sptr_swigregister = _DoA_BladeRF_swig.mess_sink_f_sptr_swigregister
mess_sink_f_sptr_swigregister(mess_sink_f_sptr)


mess_sink_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mess_sink_f = mess_sink_f.make;

class multi_exp(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::multi_exp.

    To avoid accidental use of raw pointers, DoA_BladeRF::multi_exp's constructor is in a private implementation class. DoA_BladeRF::multi_exp::make is the public interface for creating new instances.

    Args:
        arg : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(arg):
        """
        make(float arg) -> multi_exp_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::multi_exp.

        To avoid accidental use of raw pointers, DoA_BladeRF::multi_exp's constructor is in a private implementation class. DoA_BladeRF::multi_exp::make is the public interface for creating new instances.

        Args:
            arg : 
        """
        return _DoA_BladeRF_swig.multi_exp_make(arg)

    make = staticmethod(make)

    def set_arg(self, arg):
        """set_arg(multi_exp self, float arg)"""
        return _DoA_BladeRF_swig.multi_exp_set_arg(self, arg)

    __swig_destroy__ = _DoA_BladeRF_swig.delete_multi_exp
    __del__ = lambda self: None
multi_exp_swigregister = _DoA_BladeRF_swig.multi_exp_swigregister
multi_exp_swigregister(multi_exp)

def multi_exp_make(arg):
    """
    multi_exp_make(float arg) -> multi_exp_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::multi_exp.

    To avoid accidental use of raw pointers, DoA_BladeRF::multi_exp's constructor is in a private implementation class. DoA_BladeRF::multi_exp::make is the public interface for creating new instances.

    Args:
        arg : 
    """
    return _DoA_BladeRF_swig.multi_exp_make(arg)

class multi_exp_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::DoA_BladeRF::multi_exp)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::multi_exp)> self) -> multi_exp_sptr
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::multi_exp)> self, multi_exp p) -> multi_exp_sptr
        """
        this = _DoA_BladeRF_swig.new_multi_exp_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(multi_exp_sptr self) -> multi_exp"""
        return _DoA_BladeRF_swig.multi_exp_sptr___deref__(self)

    __swig_destroy__ = _DoA_BladeRF_swig.delete_multi_exp_sptr
    __del__ = lambda self: None

    def make(self, arg):
        """
        make(multi_exp_sptr self, float arg) -> multi_exp_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::multi_exp.

        To avoid accidental use of raw pointers, DoA_BladeRF::multi_exp's constructor is in a private implementation class. DoA_BladeRF::multi_exp::make is the public interface for creating new instances.

        Args:
            arg : 
        """
        return _DoA_BladeRF_swig.multi_exp_sptr_make(self, arg)


    def set_arg(self, arg):
        """set_arg(multi_exp_sptr self, float arg)"""
        return _DoA_BladeRF_swig.multi_exp_sptr_set_arg(self, arg)


    def history(self):
        """history(multi_exp_sptr self) -> unsigned int"""
        return _DoA_BladeRF_swig.multi_exp_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multi_exp_sptr self, int which, int delay)
        declare_sample_delay(multi_exp_sptr self, unsigned int delay)
        """
        return _DoA_BladeRF_swig.multi_exp_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(multi_exp_sptr self, int which) -> unsigned int"""
        return _DoA_BladeRF_swig.multi_exp_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(multi_exp_sptr self) -> int"""
        return _DoA_BladeRF_swig.multi_exp_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(multi_exp_sptr self) -> double"""
        return _DoA_BladeRF_swig.multi_exp_sptr_relative_rate(self)


    def start(self):
        """start(multi_exp_sptr self) -> bool"""
        return _DoA_BladeRF_swig.multi_exp_sptr_start(self)


    def stop(self):
        """stop(multi_exp_sptr self) -> bool"""
        return _DoA_BladeRF_swig.multi_exp_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(multi_exp_sptr self, unsigned int which_input) -> uint64_t"""
        return _DoA_BladeRF_swig.multi_exp_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(multi_exp_sptr self, unsigned int which_output) -> uint64_t"""
        return _DoA_BladeRF_swig.multi_exp_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(multi_exp_sptr self) -> int"""
        return _DoA_BladeRF_swig.multi_exp_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(multi_exp_sptr self, int m)"""
        return _DoA_BladeRF_swig.multi_exp_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multi_exp_sptr self)"""
        return _DoA_BladeRF_swig.multi_exp_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multi_exp_sptr self) -> bool"""
        return _DoA_BladeRF_swig.multi_exp_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(multi_exp_sptr self, int m)"""
        return _DoA_BladeRF_swig.multi_exp_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(multi_exp_sptr self) -> int"""
        return _DoA_BladeRF_swig.multi_exp_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(multi_exp_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.multi_exp_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multi_exp_sptr self, long max_output_buffer)
        set_max_output_buffer(multi_exp_sptr self, int port, long max_output_buffer)
        """
        return _DoA_BladeRF_swig.multi_exp_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(multi_exp_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.multi_exp_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multi_exp_sptr self, long min_output_buffer)
        set_min_output_buffer(multi_exp_sptr self, int port, long min_output_buffer)
        """
        return _DoA_BladeRF_swig.multi_exp_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(multi_exp_sptr self) -> float"""
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multi_exp_sptr self) -> float"""
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multi_exp_sptr self) -> float"""
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(multi_exp_sptr self) -> float"""
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multi_exp_sptr self) -> float"""
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(multi_exp_sptr self) -> float"""
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multi_exp_sptr self, int which) -> float
        pc_input_buffers_full(multi_exp_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multi_exp_sptr self, int which) -> float
        pc_input_buffers_full_avg(multi_exp_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multi_exp_sptr self, int which) -> float
        pc_input_buffers_full_var(multi_exp_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multi_exp_sptr self, int which) -> float
        pc_output_buffers_full(multi_exp_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multi_exp_sptr self, int which) -> float
        pc_output_buffers_full_avg(multi_exp_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multi_exp_sptr self, int which) -> float
        pc_output_buffers_full_var(multi_exp_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(multi_exp_sptr self) -> float"""
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(multi_exp_sptr self) -> float"""
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(multi_exp_sptr self) -> float"""
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(multi_exp_sptr self) -> float"""
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(multi_exp_sptr self) -> float"""
        return _DoA_BladeRF_swig.multi_exp_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(multi_exp_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _DoA_BladeRF_swig.multi_exp_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(multi_exp_sptr self)"""
        return _DoA_BladeRF_swig.multi_exp_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(multi_exp_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _DoA_BladeRF_swig.multi_exp_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(multi_exp_sptr self) -> int"""
        return _DoA_BladeRF_swig.multi_exp_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(multi_exp_sptr self) -> int"""
        return _DoA_BladeRF_swig.multi_exp_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(multi_exp_sptr self, int priority) -> int"""
        return _DoA_BladeRF_swig.multi_exp_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(multi_exp_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.multi_exp_sptr_name(self)


    def symbol_name(self):
        """symbol_name(multi_exp_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.multi_exp_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(multi_exp_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.multi_exp_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(multi_exp_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.multi_exp_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(multi_exp_sptr self) -> long"""
        return _DoA_BladeRF_swig.multi_exp_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(multi_exp_sptr self) -> basic_block_sptr"""
        return _DoA_BladeRF_swig.multi_exp_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(multi_exp_sptr self, int ninputs, int noutputs) -> bool"""
        return _DoA_BladeRF_swig.multi_exp_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(multi_exp_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.multi_exp_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(multi_exp_sptr self, std::string name)"""
        return _DoA_BladeRF_swig.multi_exp_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(multi_exp_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _DoA_BladeRF_swig.multi_exp_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(multi_exp_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.multi_exp_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(multi_exp_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.multi_exp_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(multi_exp_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.multi_exp_sptr_message_subscribers(self, which_port)

multi_exp_sptr_swigregister = _DoA_BladeRF_swig.multi_exp_sptr_swigregister
multi_exp_sptr_swigregister(multi_exp_sptr)


multi_exp_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multi_exp = multi_exp.make;

class PCA(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::PCA.

    To avoid accidental use of raw pointers, DoA_BladeRF::PCA's constructor is in a private implementation class. DoA_BladeRF::PCA::make is the public interface for creating new instances.

    Args:
        vector_size : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vector_size):
        """
        make(int vector_size) -> PCA_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::PCA.

        To avoid accidental use of raw pointers, DoA_BladeRF::PCA's constructor is in a private implementation class. DoA_BladeRF::PCA::make is the public interface for creating new instances.

        Args:
            vector_size : 
        """
        return _DoA_BladeRF_swig.PCA_make(vector_size)

    make = staticmethod(make)
    __swig_destroy__ = _DoA_BladeRF_swig.delete_PCA
    __del__ = lambda self: None
PCA_swigregister = _DoA_BladeRF_swig.PCA_swigregister
PCA_swigregister(PCA)

def PCA_make(vector_size):
    """
    PCA_make(int vector_size) -> PCA_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::PCA.

    To avoid accidental use of raw pointers, DoA_BladeRF::PCA's constructor is in a private implementation class. DoA_BladeRF::PCA::make is the public interface for creating new instances.

    Args:
        vector_size : 
    """
    return _DoA_BladeRF_swig.PCA_make(vector_size)

class PCA_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::DoA_BladeRF::PCA)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::PCA)> self) -> PCA_sptr
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::PCA)> self, PCA p) -> PCA_sptr
        """
        this = _DoA_BladeRF_swig.new_PCA_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(PCA_sptr self) -> PCA"""
        return _DoA_BladeRF_swig.PCA_sptr___deref__(self)

    __swig_destroy__ = _DoA_BladeRF_swig.delete_PCA_sptr
    __del__ = lambda self: None

    def make(self, vector_size):
        """
        make(PCA_sptr self, int vector_size) -> PCA_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::PCA.

        To avoid accidental use of raw pointers, DoA_BladeRF::PCA's constructor is in a private implementation class. DoA_BladeRF::PCA::make is the public interface for creating new instances.

        Args:
            vector_size : 
        """
        return _DoA_BladeRF_swig.PCA_sptr_make(self, vector_size)


    def history(self):
        """history(PCA_sptr self) -> unsigned int"""
        return _DoA_BladeRF_swig.PCA_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(PCA_sptr self, int which, int delay)
        declare_sample_delay(PCA_sptr self, unsigned int delay)
        """
        return _DoA_BladeRF_swig.PCA_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(PCA_sptr self, int which) -> unsigned int"""
        return _DoA_BladeRF_swig.PCA_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(PCA_sptr self) -> int"""
        return _DoA_BladeRF_swig.PCA_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(PCA_sptr self) -> double"""
        return _DoA_BladeRF_swig.PCA_sptr_relative_rate(self)


    def start(self):
        """start(PCA_sptr self) -> bool"""
        return _DoA_BladeRF_swig.PCA_sptr_start(self)


    def stop(self):
        """stop(PCA_sptr self) -> bool"""
        return _DoA_BladeRF_swig.PCA_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(PCA_sptr self, unsigned int which_input) -> uint64_t"""
        return _DoA_BladeRF_swig.PCA_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(PCA_sptr self, unsigned int which_output) -> uint64_t"""
        return _DoA_BladeRF_swig.PCA_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(PCA_sptr self) -> int"""
        return _DoA_BladeRF_swig.PCA_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(PCA_sptr self, int m)"""
        return _DoA_BladeRF_swig.PCA_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(PCA_sptr self)"""
        return _DoA_BladeRF_swig.PCA_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(PCA_sptr self) -> bool"""
        return _DoA_BladeRF_swig.PCA_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(PCA_sptr self, int m)"""
        return _DoA_BladeRF_swig.PCA_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(PCA_sptr self) -> int"""
        return _DoA_BladeRF_swig.PCA_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(PCA_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.PCA_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(PCA_sptr self, long max_output_buffer)
        set_max_output_buffer(PCA_sptr self, int port, long max_output_buffer)
        """
        return _DoA_BladeRF_swig.PCA_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(PCA_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.PCA_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(PCA_sptr self, long min_output_buffer)
        set_min_output_buffer(PCA_sptr self, int port, long min_output_buffer)
        """
        return _DoA_BladeRF_swig.PCA_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(PCA_sptr self) -> float"""
        return _DoA_BladeRF_swig.PCA_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(PCA_sptr self) -> float"""
        return _DoA_BladeRF_swig.PCA_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(PCA_sptr self) -> float"""
        return _DoA_BladeRF_swig.PCA_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(PCA_sptr self) -> float"""
        return _DoA_BladeRF_swig.PCA_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(PCA_sptr self) -> float"""
        return _DoA_BladeRF_swig.PCA_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(PCA_sptr self) -> float"""
        return _DoA_BladeRF_swig.PCA_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(PCA_sptr self, int which) -> float
        pc_input_buffers_full(PCA_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.PCA_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(PCA_sptr self, int which) -> float
        pc_input_buffers_full_avg(PCA_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.PCA_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(PCA_sptr self, int which) -> float
        pc_input_buffers_full_var(PCA_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.PCA_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(PCA_sptr self, int which) -> float
        pc_output_buffers_full(PCA_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.PCA_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(PCA_sptr self, int which) -> float
        pc_output_buffers_full_avg(PCA_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.PCA_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(PCA_sptr self, int which) -> float
        pc_output_buffers_full_var(PCA_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.PCA_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(PCA_sptr self) -> float"""
        return _DoA_BladeRF_swig.PCA_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(PCA_sptr self) -> float"""
        return _DoA_BladeRF_swig.PCA_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(PCA_sptr self) -> float"""
        return _DoA_BladeRF_swig.PCA_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(PCA_sptr self) -> float"""
        return _DoA_BladeRF_swig.PCA_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(PCA_sptr self) -> float"""
        return _DoA_BladeRF_swig.PCA_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(PCA_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _DoA_BladeRF_swig.PCA_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(PCA_sptr self)"""
        return _DoA_BladeRF_swig.PCA_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(PCA_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _DoA_BladeRF_swig.PCA_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(PCA_sptr self) -> int"""
        return _DoA_BladeRF_swig.PCA_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(PCA_sptr self) -> int"""
        return _DoA_BladeRF_swig.PCA_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(PCA_sptr self, int priority) -> int"""
        return _DoA_BladeRF_swig.PCA_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(PCA_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.PCA_sptr_name(self)


    def symbol_name(self):
        """symbol_name(PCA_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.PCA_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(PCA_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.PCA_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(PCA_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.PCA_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(PCA_sptr self) -> long"""
        return _DoA_BladeRF_swig.PCA_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(PCA_sptr self) -> basic_block_sptr"""
        return _DoA_BladeRF_swig.PCA_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(PCA_sptr self, int ninputs, int noutputs) -> bool"""
        return _DoA_BladeRF_swig.PCA_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(PCA_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.PCA_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(PCA_sptr self, std::string name)"""
        return _DoA_BladeRF_swig.PCA_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(PCA_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _DoA_BladeRF_swig.PCA_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(PCA_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.PCA_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(PCA_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.PCA_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(PCA_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.PCA_sptr_message_subscribers(self, which_port)

PCA_sptr_swigregister = _DoA_BladeRF_swig.PCA_sptr_swigregister
PCA_sptr_swigregister(PCA_sptr)


PCA_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
PCA = PCA.make;

class Hold(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::Hold.

    To avoid accidental use of raw pointers, DoA_BladeRF::Hold's constructor is in a private implementation class. DoA_BladeRF::Hold::make is the public interface for creating new instances.

    Args:
        hold : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(hold):
        """
        make(bool hold) -> Hold_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::Hold.

        To avoid accidental use of raw pointers, DoA_BladeRF::Hold's constructor is in a private implementation class. DoA_BladeRF::Hold::make is the public interface for creating new instances.

        Args:
            hold : 
        """
        return _DoA_BladeRF_swig.Hold_make(hold)

    make = staticmethod(make)

    def set_hold(self, new_hold):
        """set_hold(Hold self, bool new_hold)"""
        return _DoA_BladeRF_swig.Hold_set_hold(self, new_hold)


    def get_hold(self):
        """get_hold(Hold self) -> bool"""
        return _DoA_BladeRF_swig.Hold_get_hold(self)

    __swig_destroy__ = _DoA_BladeRF_swig.delete_Hold
    __del__ = lambda self: None
Hold_swigregister = _DoA_BladeRF_swig.Hold_swigregister
Hold_swigregister(Hold)

def Hold_make(hold):
    """
    Hold_make(bool hold) -> Hold_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::Hold.

    To avoid accidental use of raw pointers, DoA_BladeRF::Hold's constructor is in a private implementation class. DoA_BladeRF::Hold::make is the public interface for creating new instances.

    Args:
        hold : 
    """
    return _DoA_BladeRF_swig.Hold_make(hold)

class Hold_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::DoA_BladeRF::Hold)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::Hold)> self) -> Hold_sptr
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::Hold)> self, Hold p) -> Hold_sptr
        """
        this = _DoA_BladeRF_swig.new_Hold_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(Hold_sptr self) -> Hold"""
        return _DoA_BladeRF_swig.Hold_sptr___deref__(self)

    __swig_destroy__ = _DoA_BladeRF_swig.delete_Hold_sptr
    __del__ = lambda self: None

    def make(self, hold):
        """
        make(Hold_sptr self, bool hold) -> Hold_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::Hold.

        To avoid accidental use of raw pointers, DoA_BladeRF::Hold's constructor is in a private implementation class. DoA_BladeRF::Hold::make is the public interface for creating new instances.

        Args:
            hold : 
        """
        return _DoA_BladeRF_swig.Hold_sptr_make(self, hold)


    def set_hold(self, new_hold):
        """set_hold(Hold_sptr self, bool new_hold)"""
        return _DoA_BladeRF_swig.Hold_sptr_set_hold(self, new_hold)


    def get_hold(self):
        """get_hold(Hold_sptr self) -> bool"""
        return _DoA_BladeRF_swig.Hold_sptr_get_hold(self)


    def history(self):
        """history(Hold_sptr self) -> unsigned int"""
        return _DoA_BladeRF_swig.Hold_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(Hold_sptr self, int which, int delay)
        declare_sample_delay(Hold_sptr self, unsigned int delay)
        """
        return _DoA_BladeRF_swig.Hold_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(Hold_sptr self, int which) -> unsigned int"""
        return _DoA_BladeRF_swig.Hold_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(Hold_sptr self) -> int"""
        return _DoA_BladeRF_swig.Hold_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(Hold_sptr self) -> double"""
        return _DoA_BladeRF_swig.Hold_sptr_relative_rate(self)


    def start(self):
        """start(Hold_sptr self) -> bool"""
        return _DoA_BladeRF_swig.Hold_sptr_start(self)


    def stop(self):
        """stop(Hold_sptr self) -> bool"""
        return _DoA_BladeRF_swig.Hold_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(Hold_sptr self, unsigned int which_input) -> uint64_t"""
        return _DoA_BladeRF_swig.Hold_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(Hold_sptr self, unsigned int which_output) -> uint64_t"""
        return _DoA_BladeRF_swig.Hold_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(Hold_sptr self) -> int"""
        return _DoA_BladeRF_swig.Hold_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(Hold_sptr self, int m)"""
        return _DoA_BladeRF_swig.Hold_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(Hold_sptr self)"""
        return _DoA_BladeRF_swig.Hold_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(Hold_sptr self) -> bool"""
        return _DoA_BladeRF_swig.Hold_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(Hold_sptr self, int m)"""
        return _DoA_BladeRF_swig.Hold_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(Hold_sptr self) -> int"""
        return _DoA_BladeRF_swig.Hold_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(Hold_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.Hold_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(Hold_sptr self, long max_output_buffer)
        set_max_output_buffer(Hold_sptr self, int port, long max_output_buffer)
        """
        return _DoA_BladeRF_swig.Hold_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(Hold_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.Hold_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(Hold_sptr self, long min_output_buffer)
        set_min_output_buffer(Hold_sptr self, int port, long min_output_buffer)
        """
        return _DoA_BladeRF_swig.Hold_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(Hold_sptr self) -> float"""
        return _DoA_BladeRF_swig.Hold_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(Hold_sptr self) -> float"""
        return _DoA_BladeRF_swig.Hold_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(Hold_sptr self) -> float"""
        return _DoA_BladeRF_swig.Hold_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(Hold_sptr self) -> float"""
        return _DoA_BladeRF_swig.Hold_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(Hold_sptr self) -> float"""
        return _DoA_BladeRF_swig.Hold_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(Hold_sptr self) -> float"""
        return _DoA_BladeRF_swig.Hold_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(Hold_sptr self, int which) -> float
        pc_input_buffers_full(Hold_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.Hold_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(Hold_sptr self, int which) -> float
        pc_input_buffers_full_avg(Hold_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.Hold_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(Hold_sptr self, int which) -> float
        pc_input_buffers_full_var(Hold_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.Hold_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(Hold_sptr self, int which) -> float
        pc_output_buffers_full(Hold_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.Hold_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(Hold_sptr self, int which) -> float
        pc_output_buffers_full_avg(Hold_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.Hold_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(Hold_sptr self, int which) -> float
        pc_output_buffers_full_var(Hold_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.Hold_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(Hold_sptr self) -> float"""
        return _DoA_BladeRF_swig.Hold_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(Hold_sptr self) -> float"""
        return _DoA_BladeRF_swig.Hold_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(Hold_sptr self) -> float"""
        return _DoA_BladeRF_swig.Hold_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(Hold_sptr self) -> float"""
        return _DoA_BladeRF_swig.Hold_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(Hold_sptr self) -> float"""
        return _DoA_BladeRF_swig.Hold_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(Hold_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _DoA_BladeRF_swig.Hold_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(Hold_sptr self)"""
        return _DoA_BladeRF_swig.Hold_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(Hold_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _DoA_BladeRF_swig.Hold_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(Hold_sptr self) -> int"""
        return _DoA_BladeRF_swig.Hold_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(Hold_sptr self) -> int"""
        return _DoA_BladeRF_swig.Hold_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(Hold_sptr self, int priority) -> int"""
        return _DoA_BladeRF_swig.Hold_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(Hold_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.Hold_sptr_name(self)


    def symbol_name(self):
        """symbol_name(Hold_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.Hold_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(Hold_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.Hold_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(Hold_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.Hold_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(Hold_sptr self) -> long"""
        return _DoA_BladeRF_swig.Hold_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(Hold_sptr self) -> basic_block_sptr"""
        return _DoA_BladeRF_swig.Hold_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(Hold_sptr self, int ninputs, int noutputs) -> bool"""
        return _DoA_BladeRF_swig.Hold_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(Hold_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.Hold_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(Hold_sptr self, std::string name)"""
        return _DoA_BladeRF_swig.Hold_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(Hold_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _DoA_BladeRF_swig.Hold_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(Hold_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.Hold_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(Hold_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.Hold_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(Hold_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.Hold_sptr_message_subscribers(self, which_port)

Hold_sptr_swigregister = _DoA_BladeRF_swig.Hold_sptr_swigregister
Hold_sptr_swigregister(Hold_sptr)


Hold_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
Hold = Hold.make;

class vector_steering(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::vector_steering.

    To avoid accidental use of raw pointers, DoA_BladeRF::vector_steering's constructor is in a private implementation class. DoA_BladeRF::vector_steering::make is the public interface for creating new instances.

    Args:
        arg : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(arg):
        """
        make(float arg) -> vector_steering_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::vector_steering.

        To avoid accidental use of raw pointers, DoA_BladeRF::vector_steering's constructor is in a private implementation class. DoA_BladeRF::vector_steering::make is the public interface for creating new instances.

        Args:
            arg : 
        """
        return _DoA_BladeRF_swig.vector_steering_make(arg)

    make = staticmethod(make)
    __swig_destroy__ = _DoA_BladeRF_swig.delete_vector_steering
    __del__ = lambda self: None
vector_steering_swigregister = _DoA_BladeRF_swig.vector_steering_swigregister
vector_steering_swigregister(vector_steering)

def vector_steering_make(arg):
    """
    vector_steering_make(float arg) -> vector_steering_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::vector_steering.

    To avoid accidental use of raw pointers, DoA_BladeRF::vector_steering's constructor is in a private implementation class. DoA_BladeRF::vector_steering::make is the public interface for creating new instances.

    Args:
        arg : 
    """
    return _DoA_BladeRF_swig.vector_steering_make(arg)

class vector_steering_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::DoA_BladeRF::vector_steering)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::vector_steering)> self) -> vector_steering_sptr
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::vector_steering)> self, vector_steering p) -> vector_steering_sptr
        """
        this = _DoA_BladeRF_swig.new_vector_steering_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(vector_steering_sptr self) -> vector_steering"""
        return _DoA_BladeRF_swig.vector_steering_sptr___deref__(self)

    __swig_destroy__ = _DoA_BladeRF_swig.delete_vector_steering_sptr
    __del__ = lambda self: None

    def make(self, arg):
        """
        make(vector_steering_sptr self, float arg) -> vector_steering_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::vector_steering.

        To avoid accidental use of raw pointers, DoA_BladeRF::vector_steering's constructor is in a private implementation class. DoA_BladeRF::vector_steering::make is the public interface for creating new instances.

        Args:
            arg : 
        """
        return _DoA_BladeRF_swig.vector_steering_sptr_make(self, arg)


    def history(self):
        """history(vector_steering_sptr self) -> unsigned int"""
        return _DoA_BladeRF_swig.vector_steering_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(vector_steering_sptr self, int which, int delay)
        declare_sample_delay(vector_steering_sptr self, unsigned int delay)
        """
        return _DoA_BladeRF_swig.vector_steering_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(vector_steering_sptr self, int which) -> unsigned int"""
        return _DoA_BladeRF_swig.vector_steering_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(vector_steering_sptr self) -> int"""
        return _DoA_BladeRF_swig.vector_steering_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(vector_steering_sptr self) -> double"""
        return _DoA_BladeRF_swig.vector_steering_sptr_relative_rate(self)


    def start(self):
        """start(vector_steering_sptr self) -> bool"""
        return _DoA_BladeRF_swig.vector_steering_sptr_start(self)


    def stop(self):
        """stop(vector_steering_sptr self) -> bool"""
        return _DoA_BladeRF_swig.vector_steering_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(vector_steering_sptr self, unsigned int which_input) -> uint64_t"""
        return _DoA_BladeRF_swig.vector_steering_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(vector_steering_sptr self, unsigned int which_output) -> uint64_t"""
        return _DoA_BladeRF_swig.vector_steering_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(vector_steering_sptr self) -> int"""
        return _DoA_BladeRF_swig.vector_steering_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(vector_steering_sptr self, int m)"""
        return _DoA_BladeRF_swig.vector_steering_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(vector_steering_sptr self)"""
        return _DoA_BladeRF_swig.vector_steering_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(vector_steering_sptr self) -> bool"""
        return _DoA_BladeRF_swig.vector_steering_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(vector_steering_sptr self, int m)"""
        return _DoA_BladeRF_swig.vector_steering_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(vector_steering_sptr self) -> int"""
        return _DoA_BladeRF_swig.vector_steering_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(vector_steering_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.vector_steering_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(vector_steering_sptr self, long max_output_buffer)
        set_max_output_buffer(vector_steering_sptr self, int port, long max_output_buffer)
        """
        return _DoA_BladeRF_swig.vector_steering_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(vector_steering_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.vector_steering_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(vector_steering_sptr self, long min_output_buffer)
        set_min_output_buffer(vector_steering_sptr self, int port, long min_output_buffer)
        """
        return _DoA_BladeRF_swig.vector_steering_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(vector_steering_sptr self) -> float"""
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(vector_steering_sptr self) -> float"""
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(vector_steering_sptr self) -> float"""
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(vector_steering_sptr self) -> float"""
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(vector_steering_sptr self) -> float"""
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(vector_steering_sptr self) -> float"""
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(vector_steering_sptr self, int which) -> float
        pc_input_buffers_full(vector_steering_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(vector_steering_sptr self, int which) -> float
        pc_input_buffers_full_avg(vector_steering_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(vector_steering_sptr self, int which) -> float
        pc_input_buffers_full_var(vector_steering_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(vector_steering_sptr self, int which) -> float
        pc_output_buffers_full(vector_steering_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(vector_steering_sptr self, int which) -> float
        pc_output_buffers_full_avg(vector_steering_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(vector_steering_sptr self, int which) -> float
        pc_output_buffers_full_var(vector_steering_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(vector_steering_sptr self) -> float"""
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(vector_steering_sptr self) -> float"""
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(vector_steering_sptr self) -> float"""
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(vector_steering_sptr self) -> float"""
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(vector_steering_sptr self) -> float"""
        return _DoA_BladeRF_swig.vector_steering_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(vector_steering_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _DoA_BladeRF_swig.vector_steering_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(vector_steering_sptr self)"""
        return _DoA_BladeRF_swig.vector_steering_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(vector_steering_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _DoA_BladeRF_swig.vector_steering_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(vector_steering_sptr self) -> int"""
        return _DoA_BladeRF_swig.vector_steering_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(vector_steering_sptr self) -> int"""
        return _DoA_BladeRF_swig.vector_steering_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(vector_steering_sptr self, int priority) -> int"""
        return _DoA_BladeRF_swig.vector_steering_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(vector_steering_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.vector_steering_sptr_name(self)


    def symbol_name(self):
        """symbol_name(vector_steering_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.vector_steering_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(vector_steering_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.vector_steering_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(vector_steering_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.vector_steering_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(vector_steering_sptr self) -> long"""
        return _DoA_BladeRF_swig.vector_steering_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(vector_steering_sptr self) -> basic_block_sptr"""
        return _DoA_BladeRF_swig.vector_steering_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(vector_steering_sptr self, int ninputs, int noutputs) -> bool"""
        return _DoA_BladeRF_swig.vector_steering_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(vector_steering_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.vector_steering_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(vector_steering_sptr self, std::string name)"""
        return _DoA_BladeRF_swig.vector_steering_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(vector_steering_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _DoA_BladeRF_swig.vector_steering_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(vector_steering_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.vector_steering_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(vector_steering_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.vector_steering_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(vector_steering_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.vector_steering_sptr_message_subscribers(self, which_port)

vector_steering_sptr_swigregister = _DoA_BladeRF_swig.vector_steering_sptr_swigregister
vector_steering_sptr_swigregister(vector_steering_sptr)


vector_steering_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
vector_steering = vector_steering.make;

class DOA(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::DOA.

    To avoid accidental use of raw pointers, DoA_BladeRF::DOA's constructor is in a private implementation class. DoA_BladeRF::DOA::make is the public interface for creating new instances.

    Args:
        vector_size : 
        spacing : 
        num_input : 
        gain : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vector_size, spacing, num_input, gain):
        """
        make(int vector_size, float spacing, int num_input, int gain) -> DOA_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::DOA.

        To avoid accidental use of raw pointers, DoA_BladeRF::DOA's constructor is in a private implementation class. DoA_BladeRF::DOA::make is the public interface for creating new instances.

        Args:
            vector_size : 
            spacing : 
            num_input : 
            gain : 
        """
        return _DoA_BladeRF_swig.DOA_make(vector_size, spacing, num_input, gain)

    make = staticmethod(make)
    __swig_destroy__ = _DoA_BladeRF_swig.delete_DOA
    __del__ = lambda self: None
DOA_swigregister = _DoA_BladeRF_swig.DOA_swigregister
DOA_swigregister(DOA)

def DOA_make(vector_size, spacing, num_input, gain):
    """
    DOA_make(int vector_size, float spacing, int num_input, int gain) -> DOA_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::DOA.

    To avoid accidental use of raw pointers, DoA_BladeRF::DOA's constructor is in a private implementation class. DoA_BladeRF::DOA::make is the public interface for creating new instances.

    Args:
        vector_size : 
        spacing : 
        num_input : 
        gain : 
    """
    return _DoA_BladeRF_swig.DOA_make(vector_size, spacing, num_input, gain)

class DOA_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::DoA_BladeRF::DOA)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::DOA)> self) -> DOA_sptr
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::DOA)> self, DOA p) -> DOA_sptr
        """
        this = _DoA_BladeRF_swig.new_DOA_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(DOA_sptr self) -> DOA"""
        return _DoA_BladeRF_swig.DOA_sptr___deref__(self)

    __swig_destroy__ = _DoA_BladeRF_swig.delete_DOA_sptr
    __del__ = lambda self: None

    def make(self, vector_size, spacing, num_input, gain):
        """
        make(DOA_sptr self, int vector_size, float spacing, int num_input, int gain) -> DOA_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::DOA.

        To avoid accidental use of raw pointers, DoA_BladeRF::DOA's constructor is in a private implementation class. DoA_BladeRF::DOA::make is the public interface for creating new instances.

        Args:
            vector_size : 
            spacing : 
            num_input : 
            gain : 
        """
        return _DoA_BladeRF_swig.DOA_sptr_make(self, vector_size, spacing, num_input, gain)


    def history(self):
        """history(DOA_sptr self) -> unsigned int"""
        return _DoA_BladeRF_swig.DOA_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(DOA_sptr self, int which, int delay)
        declare_sample_delay(DOA_sptr self, unsigned int delay)
        """
        return _DoA_BladeRF_swig.DOA_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(DOA_sptr self, int which) -> unsigned int"""
        return _DoA_BladeRF_swig.DOA_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(DOA_sptr self) -> int"""
        return _DoA_BladeRF_swig.DOA_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(DOA_sptr self) -> double"""
        return _DoA_BladeRF_swig.DOA_sptr_relative_rate(self)


    def start(self):
        """start(DOA_sptr self) -> bool"""
        return _DoA_BladeRF_swig.DOA_sptr_start(self)


    def stop(self):
        """stop(DOA_sptr self) -> bool"""
        return _DoA_BladeRF_swig.DOA_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(DOA_sptr self, unsigned int which_input) -> uint64_t"""
        return _DoA_BladeRF_swig.DOA_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(DOA_sptr self, unsigned int which_output) -> uint64_t"""
        return _DoA_BladeRF_swig.DOA_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(DOA_sptr self) -> int"""
        return _DoA_BladeRF_swig.DOA_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(DOA_sptr self, int m)"""
        return _DoA_BladeRF_swig.DOA_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(DOA_sptr self)"""
        return _DoA_BladeRF_swig.DOA_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(DOA_sptr self) -> bool"""
        return _DoA_BladeRF_swig.DOA_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(DOA_sptr self, int m)"""
        return _DoA_BladeRF_swig.DOA_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(DOA_sptr self) -> int"""
        return _DoA_BladeRF_swig.DOA_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(DOA_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.DOA_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(DOA_sptr self, long max_output_buffer)
        set_max_output_buffer(DOA_sptr self, int port, long max_output_buffer)
        """
        return _DoA_BladeRF_swig.DOA_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(DOA_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.DOA_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(DOA_sptr self, long min_output_buffer)
        set_min_output_buffer(DOA_sptr self, int port, long min_output_buffer)
        """
        return _DoA_BladeRF_swig.DOA_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(DOA_sptr self) -> float"""
        return _DoA_BladeRF_swig.DOA_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(DOA_sptr self) -> float"""
        return _DoA_BladeRF_swig.DOA_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(DOA_sptr self) -> float"""
        return _DoA_BladeRF_swig.DOA_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(DOA_sptr self) -> float"""
        return _DoA_BladeRF_swig.DOA_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(DOA_sptr self) -> float"""
        return _DoA_BladeRF_swig.DOA_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(DOA_sptr self) -> float"""
        return _DoA_BladeRF_swig.DOA_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(DOA_sptr self, int which) -> float
        pc_input_buffers_full(DOA_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.DOA_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(DOA_sptr self, int which) -> float
        pc_input_buffers_full_avg(DOA_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.DOA_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(DOA_sptr self, int which) -> float
        pc_input_buffers_full_var(DOA_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.DOA_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(DOA_sptr self, int which) -> float
        pc_output_buffers_full(DOA_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.DOA_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(DOA_sptr self, int which) -> float
        pc_output_buffers_full_avg(DOA_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.DOA_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(DOA_sptr self, int which) -> float
        pc_output_buffers_full_var(DOA_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.DOA_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(DOA_sptr self) -> float"""
        return _DoA_BladeRF_swig.DOA_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(DOA_sptr self) -> float"""
        return _DoA_BladeRF_swig.DOA_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(DOA_sptr self) -> float"""
        return _DoA_BladeRF_swig.DOA_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(DOA_sptr self) -> float"""
        return _DoA_BladeRF_swig.DOA_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(DOA_sptr self) -> float"""
        return _DoA_BladeRF_swig.DOA_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(DOA_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _DoA_BladeRF_swig.DOA_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(DOA_sptr self)"""
        return _DoA_BladeRF_swig.DOA_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(DOA_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _DoA_BladeRF_swig.DOA_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(DOA_sptr self) -> int"""
        return _DoA_BladeRF_swig.DOA_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(DOA_sptr self) -> int"""
        return _DoA_BladeRF_swig.DOA_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(DOA_sptr self, int priority) -> int"""
        return _DoA_BladeRF_swig.DOA_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(DOA_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.DOA_sptr_name(self)


    def symbol_name(self):
        """symbol_name(DOA_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.DOA_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(DOA_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.DOA_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(DOA_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.DOA_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(DOA_sptr self) -> long"""
        return _DoA_BladeRF_swig.DOA_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(DOA_sptr self) -> basic_block_sptr"""
        return _DoA_BladeRF_swig.DOA_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(DOA_sptr self, int ninputs, int noutputs) -> bool"""
        return _DoA_BladeRF_swig.DOA_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(DOA_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.DOA_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(DOA_sptr self, std::string name)"""
        return _DoA_BladeRF_swig.DOA_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(DOA_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _DoA_BladeRF_swig.DOA_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(DOA_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.DOA_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(DOA_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.DOA_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(DOA_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.DOA_sptr_message_subscribers(self, which_port)

DOA_sptr_swigregister = _DoA_BladeRF_swig.DOA_sptr_swigregister
DOA_sptr_swigregister(DOA_sptr)


DOA_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
DOA = DOA.make;

class sample_offset(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::sample_offset.

    To avoid accidental use of raw pointers, DoA_BladeRF::sample_offset's constructor is in a private implementation class. DoA_BladeRF::sample_offset::make is the public interface for creating new instances.

    Args:
        vector_len : 
        num_xcorr : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vector_len, num_xcorr):
        """
        make(int vector_len, int num_xcorr) -> sample_offset_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::sample_offset.

        To avoid accidental use of raw pointers, DoA_BladeRF::sample_offset's constructor is in a private implementation class. DoA_BladeRF::sample_offset::make is the public interface for creating new instances.

        Args:
            vector_len : 
            num_xcorr : 
        """
        return _DoA_BladeRF_swig.sample_offset_make(vector_len, num_xcorr)

    make = staticmethod(make)
    __swig_destroy__ = _DoA_BladeRF_swig.delete_sample_offset
    __del__ = lambda self: None
sample_offset_swigregister = _DoA_BladeRF_swig.sample_offset_swigregister
sample_offset_swigregister(sample_offset)

def sample_offset_make(vector_len, num_xcorr):
    """
    sample_offset_make(int vector_len, int num_xcorr) -> sample_offset_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::sample_offset.

    To avoid accidental use of raw pointers, DoA_BladeRF::sample_offset's constructor is in a private implementation class. DoA_BladeRF::sample_offset::make is the public interface for creating new instances.

    Args:
        vector_len : 
        num_xcorr : 
    """
    return _DoA_BladeRF_swig.sample_offset_make(vector_len, num_xcorr)

class sample_offset_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::DoA_BladeRF::sample_offset)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::sample_offset)> self) -> sample_offset_sptr
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::sample_offset)> self, sample_offset p) -> sample_offset_sptr
        """
        this = _DoA_BladeRF_swig.new_sample_offset_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(sample_offset_sptr self) -> sample_offset"""
        return _DoA_BladeRF_swig.sample_offset_sptr___deref__(self)

    __swig_destroy__ = _DoA_BladeRF_swig.delete_sample_offset_sptr
    __del__ = lambda self: None

    def make(self, vector_len, num_xcorr):
        """
        make(sample_offset_sptr self, int vector_len, int num_xcorr) -> sample_offset_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::sample_offset.

        To avoid accidental use of raw pointers, DoA_BladeRF::sample_offset's constructor is in a private implementation class. DoA_BladeRF::sample_offset::make is the public interface for creating new instances.

        Args:
            vector_len : 
            num_xcorr : 
        """
        return _DoA_BladeRF_swig.sample_offset_sptr_make(self, vector_len, num_xcorr)


    def history(self):
        """history(sample_offset_sptr self) -> unsigned int"""
        return _DoA_BladeRF_swig.sample_offset_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sample_offset_sptr self, int which, int delay)
        declare_sample_delay(sample_offset_sptr self, unsigned int delay)
        """
        return _DoA_BladeRF_swig.sample_offset_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(sample_offset_sptr self, int which) -> unsigned int"""
        return _DoA_BladeRF_swig.sample_offset_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(sample_offset_sptr self) -> int"""
        return _DoA_BladeRF_swig.sample_offset_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(sample_offset_sptr self) -> double"""
        return _DoA_BladeRF_swig.sample_offset_sptr_relative_rate(self)


    def start(self):
        """start(sample_offset_sptr self) -> bool"""
        return _DoA_BladeRF_swig.sample_offset_sptr_start(self)


    def stop(self):
        """stop(sample_offset_sptr self) -> bool"""
        return _DoA_BladeRF_swig.sample_offset_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(sample_offset_sptr self, unsigned int which_input) -> uint64_t"""
        return _DoA_BladeRF_swig.sample_offset_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(sample_offset_sptr self, unsigned int which_output) -> uint64_t"""
        return _DoA_BladeRF_swig.sample_offset_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(sample_offset_sptr self) -> int"""
        return _DoA_BladeRF_swig.sample_offset_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(sample_offset_sptr self, int m)"""
        return _DoA_BladeRF_swig.sample_offset_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sample_offset_sptr self)"""
        return _DoA_BladeRF_swig.sample_offset_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sample_offset_sptr self) -> bool"""
        return _DoA_BladeRF_swig.sample_offset_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(sample_offset_sptr self, int m)"""
        return _DoA_BladeRF_swig.sample_offset_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(sample_offset_sptr self) -> int"""
        return _DoA_BladeRF_swig.sample_offset_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(sample_offset_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.sample_offset_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sample_offset_sptr self, long max_output_buffer)
        set_max_output_buffer(sample_offset_sptr self, int port, long max_output_buffer)
        """
        return _DoA_BladeRF_swig.sample_offset_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(sample_offset_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.sample_offset_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sample_offset_sptr self, long min_output_buffer)
        set_min_output_buffer(sample_offset_sptr self, int port, long min_output_buffer)
        """
        return _DoA_BladeRF_swig.sample_offset_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(sample_offset_sptr self) -> float"""
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sample_offset_sptr self) -> float"""
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sample_offset_sptr self) -> float"""
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(sample_offset_sptr self) -> float"""
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sample_offset_sptr self) -> float"""
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(sample_offset_sptr self) -> float"""
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sample_offset_sptr self, int which) -> float
        pc_input_buffers_full(sample_offset_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sample_offset_sptr self, int which) -> float
        pc_input_buffers_full_avg(sample_offset_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sample_offset_sptr self, int which) -> float
        pc_input_buffers_full_var(sample_offset_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sample_offset_sptr self, int which) -> float
        pc_output_buffers_full(sample_offset_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sample_offset_sptr self, int which) -> float
        pc_output_buffers_full_avg(sample_offset_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sample_offset_sptr self, int which) -> float
        pc_output_buffers_full_var(sample_offset_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(sample_offset_sptr self) -> float"""
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(sample_offset_sptr self) -> float"""
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(sample_offset_sptr self) -> float"""
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(sample_offset_sptr self) -> float"""
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(sample_offset_sptr self) -> float"""
        return _DoA_BladeRF_swig.sample_offset_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(sample_offset_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _DoA_BladeRF_swig.sample_offset_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(sample_offset_sptr self)"""
        return _DoA_BladeRF_swig.sample_offset_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(sample_offset_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _DoA_BladeRF_swig.sample_offset_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(sample_offset_sptr self) -> int"""
        return _DoA_BladeRF_swig.sample_offset_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(sample_offset_sptr self) -> int"""
        return _DoA_BladeRF_swig.sample_offset_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(sample_offset_sptr self, int priority) -> int"""
        return _DoA_BladeRF_swig.sample_offset_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(sample_offset_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.sample_offset_sptr_name(self)


    def symbol_name(self):
        """symbol_name(sample_offset_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.sample_offset_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(sample_offset_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.sample_offset_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(sample_offset_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.sample_offset_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(sample_offset_sptr self) -> long"""
        return _DoA_BladeRF_swig.sample_offset_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(sample_offset_sptr self) -> basic_block_sptr"""
        return _DoA_BladeRF_swig.sample_offset_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(sample_offset_sptr self, int ninputs, int noutputs) -> bool"""
        return _DoA_BladeRF_swig.sample_offset_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(sample_offset_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.sample_offset_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(sample_offset_sptr self, std::string name)"""
        return _DoA_BladeRF_swig.sample_offset_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(sample_offset_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _DoA_BladeRF_swig.sample_offset_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(sample_offset_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.sample_offset_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(sample_offset_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.sample_offset_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(sample_offset_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.sample_offset_sptr_message_subscribers(self, which_port)

sample_offset_sptr_swigregister = _DoA_BladeRF_swig.sample_offset_sptr_swigregister
sample_offset_sptr_swigregister(sample_offset_sptr)


sample_offset_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sample_offset = sample_offset.make;

class Delay(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::Delay.

    To avoid accidental use of raw pointers, DoA_BladeRF::Delay's constructor is in a private implementation class. DoA_BladeRF::Delay::make is the public interface for creating new instances.

    Args:
        itemsize : 
        delay : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(itemsize, delay):
        """
        make(size_t itemsize, int delay) -> Delay_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::Delay.

        To avoid accidental use of raw pointers, DoA_BladeRF::Delay's constructor is in a private implementation class. DoA_BladeRF::Delay::make is the public interface for creating new instances.

        Args:
            itemsize : 
            delay : 
        """
        return _DoA_BladeRF_swig.Delay_make(itemsize, delay)

    make = staticmethod(make)

    def dly(self):
        """dly(Delay self) -> int"""
        return _DoA_BladeRF_swig.Delay_dly(self)


    def set_dly(self, d):
        """set_dly(Delay self, int d)"""
        return _DoA_BladeRF_swig.Delay_set_dly(self, d)

    __swig_destroy__ = _DoA_BladeRF_swig.delete_Delay
    __del__ = lambda self: None
Delay_swigregister = _DoA_BladeRF_swig.Delay_swigregister
Delay_swigregister(Delay)

def Delay_make(itemsize, delay):
    """
    Delay_make(size_t itemsize, int delay) -> Delay_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of DoA_BladeRF::Delay.

    To avoid accidental use of raw pointers, DoA_BladeRF::Delay's constructor is in a private implementation class. DoA_BladeRF::Delay::make is the public interface for creating new instances.

    Args:
        itemsize : 
        delay : 
    """
    return _DoA_BladeRF_swig.Delay_make(itemsize, delay)

class Delay_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::DoA_BladeRF::Delay)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::Delay)> self) -> Delay_sptr
        __init__(boost::shared_ptr<(gr::DoA_BladeRF::Delay)> self, Delay p) -> Delay_sptr
        """
        this = _DoA_BladeRF_swig.new_Delay_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(Delay_sptr self) -> Delay"""
        return _DoA_BladeRF_swig.Delay_sptr___deref__(self)

    __swig_destroy__ = _DoA_BladeRF_swig.delete_Delay_sptr
    __del__ = lambda self: None

    def make(self, itemsize, delay):
        """
        make(Delay_sptr self, size_t itemsize, int delay) -> Delay_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of DoA_BladeRF::Delay.

        To avoid accidental use of raw pointers, DoA_BladeRF::Delay's constructor is in a private implementation class. DoA_BladeRF::Delay::make is the public interface for creating new instances.

        Args:
            itemsize : 
            delay : 
        """
        return _DoA_BladeRF_swig.Delay_sptr_make(self, itemsize, delay)


    def dly(self):
        """dly(Delay_sptr self) -> int"""
        return _DoA_BladeRF_swig.Delay_sptr_dly(self)


    def set_dly(self, d):
        """set_dly(Delay_sptr self, int d)"""
        return _DoA_BladeRF_swig.Delay_sptr_set_dly(self, d)


    def history(self):
        """history(Delay_sptr self) -> unsigned int"""
        return _DoA_BladeRF_swig.Delay_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(Delay_sptr self, int which, int delay)
        declare_sample_delay(Delay_sptr self, unsigned int delay)
        """
        return _DoA_BladeRF_swig.Delay_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(Delay_sptr self, int which) -> unsigned int"""
        return _DoA_BladeRF_swig.Delay_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(Delay_sptr self) -> int"""
        return _DoA_BladeRF_swig.Delay_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(Delay_sptr self) -> double"""
        return _DoA_BladeRF_swig.Delay_sptr_relative_rate(self)


    def start(self):
        """start(Delay_sptr self) -> bool"""
        return _DoA_BladeRF_swig.Delay_sptr_start(self)


    def stop(self):
        """stop(Delay_sptr self) -> bool"""
        return _DoA_BladeRF_swig.Delay_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(Delay_sptr self, unsigned int which_input) -> uint64_t"""
        return _DoA_BladeRF_swig.Delay_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(Delay_sptr self, unsigned int which_output) -> uint64_t"""
        return _DoA_BladeRF_swig.Delay_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(Delay_sptr self) -> int"""
        return _DoA_BladeRF_swig.Delay_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(Delay_sptr self, int m)"""
        return _DoA_BladeRF_swig.Delay_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(Delay_sptr self)"""
        return _DoA_BladeRF_swig.Delay_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(Delay_sptr self) -> bool"""
        return _DoA_BladeRF_swig.Delay_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(Delay_sptr self, int m)"""
        return _DoA_BladeRF_swig.Delay_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(Delay_sptr self) -> int"""
        return _DoA_BladeRF_swig.Delay_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(Delay_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.Delay_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(Delay_sptr self, long max_output_buffer)
        set_max_output_buffer(Delay_sptr self, int port, long max_output_buffer)
        """
        return _DoA_BladeRF_swig.Delay_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(Delay_sptr self, int i) -> long"""
        return _DoA_BladeRF_swig.Delay_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(Delay_sptr self, long min_output_buffer)
        set_min_output_buffer(Delay_sptr self, int port, long min_output_buffer)
        """
        return _DoA_BladeRF_swig.Delay_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(Delay_sptr self) -> float"""
        return _DoA_BladeRF_swig.Delay_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(Delay_sptr self) -> float"""
        return _DoA_BladeRF_swig.Delay_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(Delay_sptr self) -> float"""
        return _DoA_BladeRF_swig.Delay_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(Delay_sptr self) -> float"""
        return _DoA_BladeRF_swig.Delay_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(Delay_sptr self) -> float"""
        return _DoA_BladeRF_swig.Delay_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(Delay_sptr self) -> float"""
        return _DoA_BladeRF_swig.Delay_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(Delay_sptr self, int which) -> float
        pc_input_buffers_full(Delay_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.Delay_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(Delay_sptr self, int which) -> float
        pc_input_buffers_full_avg(Delay_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.Delay_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(Delay_sptr self, int which) -> float
        pc_input_buffers_full_var(Delay_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.Delay_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(Delay_sptr self, int which) -> float
        pc_output_buffers_full(Delay_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.Delay_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(Delay_sptr self, int which) -> float
        pc_output_buffers_full_avg(Delay_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.Delay_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(Delay_sptr self, int which) -> float
        pc_output_buffers_full_var(Delay_sptr self) -> pmt_vector_float
        """
        return _DoA_BladeRF_swig.Delay_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(Delay_sptr self) -> float"""
        return _DoA_BladeRF_swig.Delay_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(Delay_sptr self) -> float"""
        return _DoA_BladeRF_swig.Delay_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(Delay_sptr self) -> float"""
        return _DoA_BladeRF_swig.Delay_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(Delay_sptr self) -> float"""
        return _DoA_BladeRF_swig.Delay_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(Delay_sptr self) -> float"""
        return _DoA_BladeRF_swig.Delay_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(Delay_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _DoA_BladeRF_swig.Delay_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(Delay_sptr self)"""
        return _DoA_BladeRF_swig.Delay_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(Delay_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _DoA_BladeRF_swig.Delay_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(Delay_sptr self) -> int"""
        return _DoA_BladeRF_swig.Delay_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(Delay_sptr self) -> int"""
        return _DoA_BladeRF_swig.Delay_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(Delay_sptr self, int priority) -> int"""
        return _DoA_BladeRF_swig.Delay_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(Delay_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.Delay_sptr_name(self)


    def symbol_name(self):
        """symbol_name(Delay_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.Delay_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(Delay_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.Delay_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(Delay_sptr self) -> io_signature_sptr"""
        return _DoA_BladeRF_swig.Delay_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(Delay_sptr self) -> long"""
        return _DoA_BladeRF_swig.Delay_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(Delay_sptr self) -> basic_block_sptr"""
        return _DoA_BladeRF_swig.Delay_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(Delay_sptr self, int ninputs, int noutputs) -> bool"""
        return _DoA_BladeRF_swig.Delay_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(Delay_sptr self) -> std::string"""
        return _DoA_BladeRF_swig.Delay_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(Delay_sptr self, std::string name)"""
        return _DoA_BladeRF_swig.Delay_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(Delay_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _DoA_BladeRF_swig.Delay_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(Delay_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.Delay_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(Delay_sptr self) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.Delay_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(Delay_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _DoA_BladeRF_swig.Delay_sptr_message_subscribers(self, which_port)

Delay_sptr_swigregister = _DoA_BladeRF_swig.Delay_sptr_swigregister
Delay_sptr_swigregister(Delay_sptr)


Delay_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
Delay = Delay.make;



